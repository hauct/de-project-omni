services:
#   spark-master:
#     build:
#       context: ./docker_image/spark
#       dockerfile: Dockerfile
#     container_name: "spark-master"
#     ports:
#       - "7077:7077"  # Spark master port
#       - "8081:8080"  # Spark master web UI port
#     environment:
#       - SPARK_MODE=master
#       - SPARK_RPC_AUTHENTICATION_ENABLED=no
#       - SPARK_RPC_ENCRYPTION_ENABLED=no
#       - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
#       - SPARK_SSL_ENABLED=no
#       - SPARK_USER=spark
#     volumes:
#       - ./docker_image/spark/conf/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
#       - ./docker_image/spark/conf/log4j.properties:/opt/bitnami/spark/conf/log4j.properties
#     networks:
#       - data_network

#   spark-worker-1:
#     image: docker.io/bitnami/spark:3.5.2
#     container_name: "spark-worker-1"
#     ports:
#       - 4041:4040
#       - 18081:18080
#     env_file:
#       - .env
#     depends_on:
#       - spark-master
#     networks:
#       - data_network

#   spark-worker-2:
#     image: docker.io/bitnami/spark:3.5.2
#     container_name: "spark-worker-2"
#     ports:
#       - 4042:4040
#       - 18082:18080
#     env_file:
#       - .env
#     depends_on:
#       - spark-master
#     networks:
#       - data_network

#   jupyterlab:
#     build: 
#       context: ./docker_image/jupyterlab
#       dockerfile: Dockerfile
#     hostname: jupyterlab
#     container_name: jupyterlab
#     user: root
#     environment:
#       - JUPYTER_ENABLE_LAB="yes"
#       - GRANT_SUDO="yes"
#       - MLFLOW_S3_ENDPOINT_URL=http://minio:9000/ 
#       - AWS_ACCESS_KEY_ID=minio
#       - AWS_SECRET_ACCESS_KEY=minio123
#       - SPARK_MASTER=spark://spark-master:7077
#     volumes:
#       - ./docker_image/jupyterlab/work:/home/jovyan/work
#       - ./docker_image/jupyterlab/conf/spark-defaults.conf:/usr/local/spark/conf/spark-defaults.conf
#     ports:
#       - "8888:8888"
#       - "4040:4040"
#     networks:
#       - data_network

#   minio:
#     build: 
#       context: ./docker_image/minio
#       dockerfile: minio.Dockerfile
#     hostname: minio
#     container_name: minio
#     ports:
#       - "9001:9001"
#       - "9000:9000"
#     command: [ "server", "/data", "--console-address", ":9001" ]
#     volumes:
#       - /docker_image/minio/data:/data
#     env_file:
#       - .env
#     networks:
#       - data_network

#   mc:
#     build: 
#       context: ./docker_image/minio
#       dockerfile: mc.Dockerfile
#     container_name: mc
#     hostname: mc
#     env_file:
#       - .env
#     entrypoint: >
#       /bin/sh -c " until (/usr/bin/mc config host add minio http://minio:9000/ minio minio123) do echo '...waiting...' && sleep 10; done; /usr/bin/mc mb minio/mlflow; tail -f /dev/null;"
#     depends_on:     
#       - minio
#     networks:
#       - data_network

#   mariadb:
#     build: 
#       context: ./docker_image/mariadb
#       dockerfile: Dockerfile
#     container_name: mariadb
#     ports:
#       - "3309:3306"
#     env_file:
#       - .env
#     networks:
#       - data_network

#   hive-metastore:
#     build:
#       context: ./docker_image/hive-metastore
#       dockerfile: Dockerfile
#     hostname: hive-metastore 
#     container_name: hive-metastore
#     ports:
#       - "9083:9083"
#     volumes:
#       - ./docker_image/hive-metastore/metastore-site.xml:/opt/apache-hive-metastore-3.0.0-bin/conf/metastore-site.xml:ro
#     environment:
#       METASTORE_DB_HOSTNAME: mariadb
#     networks:
#       - data_network
#     depends_on:
#       - mariadb

  de_dagster_dagit:
    build:
      context: ./docker_image/dagster
      dockerfile: Dockerfile
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: de_dagster_dagit
    ports:
      - "3001:3001"
    volumes:
      - ./docker_image/dagster/dagster_home:/opt/dagster/dagster_home
    env_file:
      - .env
    networks:
      - data_network

  de_dagster_daemon:
    build:
      context: ./docker_image/dagster
      dockerfile: Dockerfile
    entrypoint:
      - dagster-daemon
      - run
    container_name: de_dagster_daemon
    volumes:
      - ./docker_image/dagster/dagster_home:/opt/dagster/dagster_home
    env_file:
      - .env
    networks:
      - data_network

networks:
  data_network:
    driver: bridge
    name: data_network